/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Datasource as PrismaDatasource } from "@prisma/client";

export class DatasourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DatasourceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.datasource.count(args);
  }

  async datasources(
    args: Prisma.DatasourceFindManyArgs
  ): Promise<PrismaDatasource[]> {
    return this.prisma.datasource.findMany(args);
  }
  async datasource(
    args: Prisma.DatasourceFindUniqueArgs
  ): Promise<PrismaDatasource | null> {
    return this.prisma.datasource.findUnique(args);
  }
  async createDatasource(
    args: Prisma.DatasourceCreateArgs
  ): Promise<PrismaDatasource> {
    return this.prisma.datasource.create(args);
  }
  async updateDatasource(
    args: Prisma.DatasourceUpdateArgs
  ): Promise<PrismaDatasource> {
    return this.prisma.datasource.update(args);
  }
  async deleteDatasource(
    args: Prisma.DatasourceDeleteArgs
  ): Promise<PrismaDatasource> {
    return this.prisma.datasource.delete(args);
  }
}
