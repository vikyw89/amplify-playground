/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ChatMessage as PrismaChatMessage,
  File as PrismaFile,
  Thread as PrismaThread,
} from "@prisma/client";

export class ChatMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatMessage.count(args);
  }

  async chatMessages(
    args: Prisma.ChatMessageFindManyArgs
  ): Promise<PrismaChatMessage[]> {
    return this.prisma.chatMessage.findMany(args);
  }
  async chatMessage(
    args: Prisma.ChatMessageFindUniqueArgs
  ): Promise<PrismaChatMessage | null> {
    return this.prisma.chatMessage.findUnique(args);
  }
  async createChatMessage(
    args: Prisma.ChatMessageCreateArgs
  ): Promise<PrismaChatMessage> {
    return this.prisma.chatMessage.create(args);
  }
  async updateChatMessage(
    args: Prisma.ChatMessageUpdateArgs
  ): Promise<PrismaChatMessage> {
    return this.prisma.chatMessage.update(args);
  }
  async deleteChatMessage(
    args: Prisma.ChatMessageDeleteArgs
  ): Promise<PrismaChatMessage> {
    return this.prisma.chatMessage.delete(args);
  }

  async findFiles(
    parentId: string,
    args: Prisma.FileFindManyArgs
  ): Promise<PrismaFile[]> {
    return this.prisma.chatMessage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }

  async getThread(parentId: string): Promise<PrismaThread | null> {
    return this.prisma.chatMessage
      .findUnique({
        where: { id: parentId },
      })
      .thread();
  }
}
