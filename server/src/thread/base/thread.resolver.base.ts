/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Thread } from "./Thread";
import { ThreadCountArgs } from "./ThreadCountArgs";
import { ThreadFindManyArgs } from "./ThreadFindManyArgs";
import { ThreadFindUniqueArgs } from "./ThreadFindUniqueArgs";
import { CreateThreadArgs } from "./CreateThreadArgs";
import { UpdateThreadArgs } from "./UpdateThreadArgs";
import { DeleteThreadArgs } from "./DeleteThreadArgs";
import { ChatMessageFindManyArgs } from "../../chatMessage/base/ChatMessageFindManyArgs";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { ThreadService } from "../thread.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Thread)
export class ThreadResolverBase {
  constructor(
    protected readonly service: ThreadService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "read",
    possession: "any",
  })
  async _threadsMeta(
    @graphql.Args() args: ThreadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Thread])
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "read",
    possession: "any",
  })
  async threads(@graphql.Args() args: ThreadFindManyArgs): Promise<Thread[]> {
    return this.service.threads(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Thread, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "read",
    possession: "own",
  })
  async thread(
    @graphql.Args() args: ThreadFindUniqueArgs
  ): Promise<Thread | null> {
    const result = await this.service.thread(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Thread)
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "create",
    possession: "any",
  })
  async createThread(@graphql.Args() args: CreateThreadArgs): Promise<Thread> {
    return await this.service.createThread({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Thread)
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "update",
    possession: "any",
  })
  async updateThread(
    @graphql.Args() args: UpdateThreadArgs
  ): Promise<Thread | null> {
    try {
      return await this.service.updateThread({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Thread)
  @nestAccessControl.UseRoles({
    resource: "Thread",
    action: "delete",
    possession: "any",
  })
  async deleteThread(
    @graphql.Args() args: DeleteThreadArgs
  ): Promise<Thread | null> {
    try {
      return await this.service.deleteThread(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ChatMessage], { name: "chatMessages" })
  @nestAccessControl.UseRoles({
    resource: "ChatMessage",
    action: "read",
    possession: "any",
  })
  async findChatMessages(
    @graphql.Parent() parent: Thread,
    @graphql.Args() args: ChatMessageFindManyArgs
  ): Promise<ChatMessage[]> {
    const results = await this.service.findChatMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
